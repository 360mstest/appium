language: node_js
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - g++-4.8
env:
  global:
    - CXX=g++-4.8
node_js: "10"
jobs:
  include:
    # Run the tests and generate/update npm-shrinkwrap.json
    - stage: Lockfile
      os:
        - linux
        - sudo: false
      script: npm run test && npm run e2e-test
      node_js: "11"
    - stage:
      os:
        - linux
        - sudo: false
      script: npm run test && npm run e2e-test
      node_js: "10"
      before_install:
        - bash ./bin/has-code-changes.sh || travis_terminate 0 # If only .md files were changed, exit the build altogether
        - npm install -g greenkeeper-lockfile
      before_script: greenkeeper-lockfile-update
      script: npm run test
      after_script: greenkeeper-lockfile-update

    # Run the tests and generate/update npm-shrinkwrap.json
    - stage: Tests
      os:
        - linux
        - sudo: false
      node_js: "10"
      script: npm run test && npm run e2e-test

    # Run tests in Node versions
    - stage:
      os:
        - linux
        - sudo: false
      script: npm run test && npm run e2e-test
      node_js: "8"

    - stage:
      os:
        - linux
        - sudo: false
      env:
        # this is just to indicate in the Travis job list that this is generating docs
        - GENERATE_DOCS=true
      script: npm run generate-docs

    - stage: Tag beta
      # if: branch = master AND type != pull_request
      os:
        - linux
        - sudo: false
      script:
        - git checkout $TRAVIS_BRANCH
        - git branch --set-upstream-to origin/$TRAVIS_BRANCH
        - node ./build/test/scripts/is-package-json-commit.js || release-it minor --preRelease=beta
    
    - stage: Bundle zip and publish beta
      # only want to run this on the main master branch
      # if: tag # TODO: This should only be called on 'tag' branches
      os:
        - osx
        - osx_image: xcode9.4
      env:
        - CC=gcc
        - CXX=g++
      before_install:
        - gcc --version
      install:
        # Installs dependencies specified in package-lock.json
        - npm ci
      before_script:
        # Strip out devDependencies and shrinkwrap it
        - rimraf package-lock.json
        - npm prune --production
        - npm shrinkwrap --production

        # Backup the npm-shrinkwrap.json file
        - mv npm-shrinkwrap.json npm-shrinkwrap-no-dev-deps.json

        # Re-install so that we get the dev dependencies back
        - npm install

        # Restore npm-shrinkwrap.json to what it was before (with no dev dependencies)
        - rimraf package-lock.json
        - mv npm-shrinkwrap-no-dev-deps.json npm-shrinkwrap.json
      script:
        - npm run zip-and-upload
        - npm run release-beta
